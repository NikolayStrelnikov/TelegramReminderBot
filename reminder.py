from config import user_action, bot
import threading
import calendar
from datetime import datetime, timedelta
from dateutil import relativedelta
from dateutil.parser import parse, parserinfo
from telebot.apihelper import ApiException


# –ú–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ –≤—ã–∑–æ–≤–∞ —Ç–∞–π–º–µ—Ä–∞
def reminder_wait():
    timeout = 60
    actual_queue = user_action.get_actual_queue()
    delta = (datetime.strptime(actual_queue[0][3], '%Y-%m-%d %H:%M:%S') - datetime.now()).total_seconds() \
        if bool(actual_queue) else 0
    need_update_queue = user_action.get_update_queue()
    # print(datetime.now(), f'{delta} - —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, '
    #                       f'–µ—Å–ª–∏ –º–µ–Ω—å—à–µ {timeout}, –ø–∏—à–µ–º –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–∞–π–º–µ—Ä–∞')

    if 0 < delta < timeout:
        re_timer = threading.Timer(delta, reminder_send, actual_queue)
        # –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –ø–æ—Å–ª–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        # print(datetime.now(), '–ü–û–®–õ–ï–ú –≠–¢–û', delta, actual_queue)
    elif need_update_queue:
        re_timer = threading.Timer(timeout, reminder_update_base, need_update_queue)
        # –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        # print(datetime.now(), '–û–ë–ù–û–í–ò–ú –ë–ê–ó–£', timeout, need_update_queue)
    else:
        re_timer = threading.Timer(timeout, reminder_send, [])
        # –µ—Å–ª–∏ –Ω–µ –ø–æ—Å—ã–ª–∞–µ–º –∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã—Ö, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        # print(datetime.now(), '–ù–ò–ß–ï–ì–û –ù–ï –ü–û–®–õ–®–ï–ú, –û–ë–ù–û–í–ò–ú –¢–ê–ô–ú–ï–†')

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –∫—Ä–∞—à–∞ –±–æ—Ç–∞, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç
    if re_timer.is_alive():
        re_timer.cancel()
    re_timer.start()


# –ú–µ—Ç–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def reminder_send(*args):
    if args:
        for i in args:
            chat_id = i[1]
            message = f'<b><u>üåü–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</u></b>\n\n{i[6]}'
            try:
                bot.send_message(chat_id, message, 'html')
            except ApiException as e:
                if e.result.status_code == 403:
                    if ('bot was blocked by the user' in e.result.text
                            or 'bot can\'t initiate conversation with a user' in e.result.text
                            or 'user is deactivated' in e.result.text):
                        bot.user_action.delete_all_by_user_id(chat_id)
                    elif ('bot was kicked from the group chat' in e.result.text
                          or 'bot was blocked by the channel' in e.result.text):
                        bot.user_action.delete_all_by_chat_id(chat_id)
                else:
                    raise e
    reminder_update_base(*args)


# –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def reminder_update_base(*args):
    if args:
        for i in args:
            base_id = i[0]
            up_day = i[2]
            last_up = datetime.strptime(i[3], '%Y-%m-%d %H:%M:%S')
            last_up_date = last_up.date()
            last_up_time = last_up.time()
            period = i[4]
            factor = i[5]

            if period == 'ONETIME':
                # —Ä–∞–∑–æ–≤—ã–µ –≤–æ–æ–±—â–µ —É–¥–∞–ª—è—Ç—å –Ω–∞–¥–æ
                # next_date = 0
                # user_action.set_status_update(last_up, next_date, base_id)
                bot.user_action.delete_event_by_id(base_id)

            elif period == 'MINUTE':
                next_date = last_up
                while next_date < datetime.now():
                    next_date += timedelta(minutes=int(factor))
                user_action.set_status_update(last_up, next_date, base_id)

            elif period == 'HOUR':
                next_date = last_up
                while next_date < datetime.now():
                    next_date += timedelta(hours=int(factor))
                user_action.set_status_update(last_up, next_date, base_id)

            elif period == 'WORKDAY':
                current_week_day = last_up_date.weekday() + 1
                delta = 7 - current_week_day + int(factor[0])
                for wd in factor:
                    if int(wd) > current_week_day:
                        delta = int(wd) - current_week_day
                        break
                next_date = datetime.combine((last_up_date + timedelta(days=delta)), last_up_time)
                user_action.set_status_update(last_up, next_date, base_id)

            elif period == 'DAILY':
                next_date = datetime.combine((last_up_date + timedelta(days=int(factor))), last_up_time)
                user_action.set_status_update(last_up, next_date, base_id)

            elif period == 'WEEKLY':
                next_date = datetime.combine((last_up_date + timedelta(weeks=int(factor))), last_up_time)
                user_action.set_status_update(last_up, next_date, base_id)

            elif period == 'MONTHLY':
                next_date = last_up_date + relativedelta.relativedelta(months=int(factor))
                max_next_day = calendar.monthrange(next_date.year, next_date.month)[1]
                max_next_date = f'{next_date.year}-{next_date.month}-{max_next_day} {last_up_time}'
                up_day_int = int(up_day)
                if up_day_int >= max_next_day:
                    next_date_time = datetime.strptime(max_next_date, '%Y-%m-%d %H:%M:%S')
                else:
                    next_date_time = datetime.combine(next_date, last_up_time)
                user_action.set_status_update(up_day_int, next_date_time, base_id)
    reminder_wait()


# –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã-–≤—Ä–µ–º–µ–Ω–∏
def valid_date(message):
    try:
        # date_time = datetime.strptime(message.text, '%Y-%m-%d %H:%M')
        date_time = parse(message.text, dayfirst=True, fuzzy=False, parserinfo=RussianParserInfo())
        if date_time < datetime.now():
            bot.reply_to(message, f'–í–≤–µ–¥–µ–Ω—ã –¥–∞—Ç–∞ –∏/–∏–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º: {date_time} \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            return False
        elif date_time > datetime(2099, 12, 31):
            bot.reply_to(message, f'–û–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≤ –Ω–∞—à–µ–º –≤–µ–∫–µ –¥–æ 2099 –≥–æ–¥–∞? \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        else:
            return date_time
    except ValueError:
        bot.reply_to(message, f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è,\n'
                              f'–ø—Ä–∏–º–µ—Ä: {datetime.now().strftime("%d.%m.%Y %H:%M")}')
        return False


# –ú–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ú–ï–ù–Æ
def build_menu(buttons, n_cols: int, header_buttons=None, footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu


# –ú–µ—Ç–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def reminder_set_active(factor, user_id):
    bot.user_action.set_active(factor, user_id)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Exception
def create_err_msg(err: Exception) -> str:
    current_date = datetime.now().strftime('%H:%M:%S %d/%m/%y')
    err_mess = f'–û—à–∏–±–∫–∞ –±–æ—Ç–∞. –í—Ä–µ–º—è: {current_date}\n{err.__class__}:\n{err}'
    return err_mess


class RussianParserInfo(parserinfo):
    MONTHS = [('–Ø–Ω–≤', '–Ø–Ω–≤–∞—Ä—å', '–Ø–Ω–≤–∞—Ä—è', 'Jan', 'January'),
              ('–§–µ–≤', '–§–µ–≤—Ä–∞–ª—å', '–§–µ–≤—Ä–∞–ª—è', 'Feb', 'February'),
              ('–ú–∞—Ä', '–ú–∞—Ä—Ç', '–ú–∞—Ä—Ç–∞', 'Mar', 'March'),
              ('–ê–ø—Ä', '–ê–ø—Ä–µ–ª—å', '–ê–ø—Ä–µ–ª—è', 'Apr', 'April'),
              ('–ú–∞–π', '–ú–∞–π', '–ú–∞—è', 'May'),
              ('–ò—é–Ω—å', '–ò—é–Ω—å', '–ò—é–Ω—è', 'Jun', 'June'),
              ('–ò—é–ª—å', '–ò—é–ª—å', '–ò—é–ª—è', 'Jul', 'July'),
              ('–ê–≤–≥', '–ê–≤–≥—É—Å—Ç', '–ê–≤–≥—É—Å—Ç–∞', 'Aug', 'August'),
              ('–°–µ–Ω—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–°–µ–Ω—Ç—è–±—Ä—è', 'Sep', 'September'),
              ('–û–∫—Ç', '–û–∫—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—è', 'Oct', 'October'),
              ('–ù–æ—è', '–ù–æ—è–±—Ä—å', '–ù–æ—è–±—Ä—è', 'Nov', 'November'),
              ('–î–µ–∫', '–î–µ–∫–∞–±—Ä—å', '–î–µ–∫–∞–±—Ä—è', 'Dec', 'December')]

    PERTAIN = ['–≥.', '–≥', 'of']

    WEEKDAYS = [('–ü–Ω', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Mon', 'Monday'),
                ('–í—Ç', '–í—Ç–æ—Ä–Ω–∏–∫', 'Tue', 'Tuesday'),
                ('–°—Ä', '–°—Ä–µ–¥–∞', 'Wed', 'Wednesday'),
                ('–ß—Ç', '–ß–µ—Ç–≤–µ—Ä–≥', 'Thu', 'Thursday'),
                ('–ü—Ç', '–ü—è—Ç–Ω–∏—Ü–∞', 'Fri', 'Friday'),
                ('–°–±', '–°—É–±–±–æ—Ç–∞', 'Sat', 'Saturday'),
                ('–í—Å', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', 'Sun', 'Sunday')]

    HMS = [('—á', '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤', 'h', 'hour', 'hours'),
           ('–º', '–º–∏–Ω', '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç', 'm', 'min', 'minute', 'minutes'),
           ('—Å', '—Å–µ–∫', '—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥', 's', 'sec', 'second', 'seconds')]
