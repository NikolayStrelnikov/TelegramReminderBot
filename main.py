import time
from datetime import datetime

from telebot import types
from telebot.apihelper import ApiTelegramException

from config import ADMIN_CHAT_ID
from logger import logger
from reminder import reminder_wait
from utils import bot, build_menu, create_err_msg, text_processor, choose_period, select_period, show_details


# –ö–û–ú–ê–ù–î–´ ------------------------------------------------
@bot.message_handler(commands=['start', 'help'])
def user_start(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if chat_id == user_id:
        name = message.from_user.first_name
        surname = message.from_user.last_name
        mess = (f'–ü—Ä–∏–≤–µ—Ç! <b>{name if name else ""} {surname if surname else ""} </b>'
                f'\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –¢–µ–ª–µ–≥—Ä–∞–º'
                f'\n–ß—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≤ –≥—Ä—É–ø–ø–µ:'
                f'\n  1. –î–æ–±–∞–≤—å—Ç–µ –≤ –≥—Ä—É–ø–ø—É –±–æ—Ç–∞ '
                f'\n  2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start@AlfaReminderBot'
                f'\n\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /set'
                f'\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–ª—è –ª—é–±–æ–≥–æ —á–∞—Ç–∞, –≥–¥–µ –≤—ã —É–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏ –±–æ—Ç–∞'
                f'\n–ß—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit')
    # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    else:
        mess = (f'–ü—Ä–∏–≤–µ—Ç!'
                f'\n–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –¢–µ–ª–µ–≥—Ä–∞–º'
                f'\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ'
                f'\n–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    username = message.from_user.username if message.from_user.username else user_id
    title = message.chat.title if message.chat.title else '–ú–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç'
    if bot.user_action.check_create_user(user_id, chat_id):
        bot.user_action.set_new_user(chat_id=chat_id, user_id=user_id, title=title, username=username)
    else:
        bot.user_action.update_exist_user(chat_id=chat_id, user_id=user_id, title=title, username=username)
    bot.send_message(chat_id, mess, parse_mode='HTML')


@bot.message_handler(commands=['set'])
def user_set_menu(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    if chat_id == user_id:
        groups = bot.user_action.get_groups(user_id)
        keyboard = types.InlineKeyboardMarkup()
        button_list = []
        for i in groups:
            button_list.append(types.InlineKeyboardButton(text=i[1], callback_data=f'CREATE:{i[0]}'))
        keyboard.add(*button_list)
        # n_cols = 1 is for single column and multiple rows
        reply_markup = types.InlineKeyboardMarkup(build_menu(button_list, n_cols=1))
        mess = f'–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'

        last_mess_id = bot.user_action.get_last_mess_id(user_id)
        if last_mess_id:
            try:
                bot.delete_message(chat_id, last_mess_id)
            except ApiTelegramException:
                pass
        new_message = bot.send_message(chat_id, mess, parse_mode='HTML', reply_markup=reply_markup)
        bot.user_action.set_last_mess_id(new_message.message_id, user_id)

    # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    else:
        mess = f'–£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Ö –∞–≤—Ç–æ—Ä —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º'
        bot.send_message(chat_id, mess, parse_mode='HTML')


@bot.message_handler(commands=['edit'])
def user_delete_menu(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if chat_id == user_id:
        all_reminds = bot.user_action.get_all_active(user_id)
        last_mess_id = bot.user_action.get_last_mess_id(user_id)
        bot.user_action.delete_update_event(user_id)

        if all_reminds:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
            for i in range(len(all_reminds)):
                all_reminds[i] = (all_reminds[i][:2] +
                                  (datetime.strptime(all_reminds[i][2], "%Y-%m-%d %H:%M:%S"),) +
                                  all_reminds[i][3:])
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
            all_reminds.sort(key=lambda x: x[2])
        keyboard = types.InlineKeyboardMarkup()
        button_list = []
        for i in all_reminds:
            if i[3] == 'PAUSE':
                actual = '‚è∏'
                if i[4] == 'EDIT_DATE':
                    actual = '‚è∞'
                elif i[4] == 'EDIT_PERIOD':
                    actual = 'üí´'
                elif i[4] == 'EDIT_TEXT':
                    actual = '‚úèÔ∏è'
            elif i[3] == 'ERROR':
                actual = '‚ö†Ô∏è'
            else:
                actual = i[2].strftime("%d.%m.%Y")
            button_list.append(types.InlineKeyboardButton(text=f'{actual} : {i[1]}', callback_data=f'MODIFY:{i[0]}'))
        if button_list:
            button_list.append(types.InlineKeyboardButton(text='‚¨ÖÔ∏è  –û—Ç–º–µ–Ω–∞', callback_data='CANCEL'))
        keyboard.add(*button_list)
        reply_markup = types.InlineKeyboardMarkup(build_menu(button_list, n_cols=1))
        mess = f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å' if all_reminds \
            else f'–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /set'

        if last_mess_id:
            try:
                bot.delete_message(chat_id, last_mess_id)
            except ApiTelegramException:
                pass
        new_message = bot.send_message(chat_id, mess, parse_mode='HTML', reply_markup=reply_markup)
        bot.user_action.set_last_mess_id(new_message.message_id, user_id)
    # –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    else:
        mess = f'–£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Ö –∞–≤—Ç–æ—Ä —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º'
        bot.send_message(chat_id, mess, parse_mode='HTML')


@bot.message_handler(commands=['status'])
def user_get_status(message: types.Message):
    if message.chat.id == ADMIN_CHAT_ID:
        start_time = datetime.strptime(bot_start_time, "%a %b %d %H:%M:%S %Y")
        uptime_bot = datetime.now() - start_time
        all_users = bot.user_action.get_all_users()
        all_users_str = ' '.join(all_users)
        count_all_users = len(all_users)
        count_active_users = bot.user_action.get_active_users()
        count_mess = bot.user_action.get_count_mess()
        mess = (f'<b><u>Bot Statistic and Status:</u></b>'
                f'\n\n<b>Uptime: </b> {str(uptime_bot).split(".")[0]}'
                f'\n<b>Messages: </b> {count_mess}'
                f'\n<b>Users: </b> {count_all_users} <b> Active: </b>{count_active_users}'
                f'\n<b>Registered: </b> {all_users_str}')
        bot.send_message(message.chat.id, mess, parse_mode='HTML')


# –°–û–û–ë–©–ï–ù–ò–Ø -------------------------------------------------
@bot.message_handler(content_types=['text'])
def user_set_remind(message: types.Message):
    if message.chat.id == message.from_user.id:
        text_processor(message)


# –í–°–ï –ö–ù–û–ü–ö–ò ------------------------------------------------
@bot.callback_query_handler(func=lambda call: True)
def user_set_chat(call: types.CallbackQuery):
    if call.data.startswith('MODIFY:'):
        base_id = int(call.data.partition(':')[2])
        remind = bot.user_action.get_message_by_id(base_id)
        if remind:
            mess = show_details(remind) + (f'\n\n<b>–ñ–µ–ª–∞–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, '
                                           f'{"–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if remind[10] == "ACTIVE" else "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"} '
                                           f'–∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?</b>')

            keyboard = types.InlineKeyboardMarkup()
            button_list = [
                types.InlineKeyboardButton(text='‚è∞  –î–∞—Ç–∞/–í—Ä–µ–º—è', callback_data=f'EDIT_DATE:{base_id}'),
                types.InlineKeyboardButton(text='üí´  –ü–µ—Ä–∏–æ–¥', callback_data=f'EDIT_PERIOD:{base_id}'),
                types.InlineKeyboardButton(text='‚úèÔ∏è  –¢–µ–∫—Å—Ç', callback_data=f'EDIT_TEXT:{base_id}'),
                types.InlineKeyboardButton(text=f'{"‚è∏  –°—Ç–æ–ø" if remind[10] == "ACTIVE" else "‚ñ∂Ô∏è  –°—Ç–∞—Ä—Ç"}',
                                           callback_data=f'PAUSE:{base_id}'),
                types.InlineKeyboardButton(text='üóë  –£–¥–∞–ª–∏—Ç—å', callback_data=f'PRE_DEL:{base_id}'),
                types.InlineKeyboardButton(text='‚¨ÖÔ∏è  –û—Ç–º–µ–Ω–∞', callback_data='CANCEL')
            ]
            keyboard.add(*button_list)
            reply_markup = types.InlineKeyboardMarkup(build_menu(button_list, n_cols=2))

            bot.edit_message_text(mess, call.message.chat.id, call.message.message_id,
                                  reply_markup=reply_markup, parse_mode='HTML')
        else:
            bot.delete_message(call.message.chat.id, call.message.message_id)

    elif call.data.startswith('EDIT_'):
        status_and_column = call.data.partition(':')[0]
        base_id = int(call.data.partition(':')[2])
        bot.user_action.set_status_by_id('PAUSE', status_and_column, base_id)
        remind = bot.user_action.get_message_by_id(base_id)
        mess = show_details(remind)
        if status_and_column == 'EDIT_DATE':
            mess += f'\n\n<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>'
            bot.edit_message_text(mess, call.message.chat.id, call.message.message_id, parse_mode='HTML')
        elif status_and_column == 'EDIT_PERIOD':
            select_period(user_id=call.message.chat.id, base_id=base_id)
        elif status_and_column == 'EDIT_TEXT':
            mess += f'\n\n<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b>'
            bot.edit_message_text(mess, call.message.chat.id, call.message.message_id, parse_mode='HTML')

    elif call.data.startswith('PAUSE:'):
        base_id = int(call.data.partition(':')[2])
        remind = bot.user_action.get_message_by_id(base_id)
        if remind[10] == 'ACTIVE':
            bot.user_action.set_status_by_id('PAUSE', 'PAUSE', base_id)
            mess = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ <b>{remind[3]}</b> –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
        else:
            bot.user_action.set_status_by_id('ACTIVE', 'ACTIVE', base_id)
            mess = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ <b>{remind[3]}</b> –∞–∫—Ç–∏–≤–Ω–æ'
            if remind[10] == 'ERROR':
                mess += f'\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É: <b>{remind[11]}</b>'
            else:
                date_time = datetime.strptime(remind[6], "%Y-%m-%d %H:%M:%S")
                next_date = ' –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É'
                if date_time > datetime.now():
                    next_date = ': ' + date_time.strftime('%d.%m.%Y %H:%M')
                mess += '\n–í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' + next_date
        bot.edit_message_text(mess, call.message.chat.id, call.message.message_id, parse_mode='HTML')

    elif call.data.startswith('PRE_DEL:'):
        base_id = int(call.data.partition(':')[2])
        mess = f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è'
        keyboard = types.InlineKeyboardMarkup()
        button_list = [
            types.InlineKeyboardButton(text='üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'DELETE:{base_id}'),
            types.InlineKeyboardButton(text='‚óÄÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'CANCEL')
        ]
        keyboard.add(*button_list)
        reply_markup = types.InlineKeyboardMarkup(build_menu(button_list, n_cols=2))
        bot.edit_message_text(mess, call.message.chat.id, call.message.message_id,
                              reply_markup=reply_markup, parse_mode='HTML')

    elif call.data.startswith('DELETE:'):
        base_id = int(call.data.partition(':')[2])
        bot.user_action.delete_event_by_id(base_id)
        mess = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ'
        bot.edit_message_text(mess, call.message.chat.id, call.message.message_id, parse_mode='HTML')

    elif call.data.startswith('CREATE:'):
        chosen_chat_id = int(call.data.partition(':')[2])
        user_id = call.message.chat.id  # call –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –±–æ—Ç–∞, –±–µ—Ä–µ–º —á–∞—Ç

        # —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å NEW !!!
        bot.user_action.set_new_event(chat_id=chosen_chat_id, user_id=user_id)
        mess = f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'
        bot.edit_message_text(mess, call.message.chat.id, call.message.message_id, parse_mode='HTML')

    elif call.data.startswith('PERIOD:'):
        # user_id = call.message.chat.id
        choose = tuple(call.data.split(':'))[1]
        base_id = int(tuple(call.data.split(':'))[2])
        # –∑–∞–ø–∏—Å–∞–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –≤ –±–∞–∑—É
        bot.user_action.set_period(period=choose, db_id=base_id)

        mess = choose_period(choose=choose, base_id=base_id)
        bot.edit_message_text(mess, call.message.chat.id, call.message.message_id, parse_mode='HTML')

    else:
        bot.delete_message(call.message.chat.id, call.message.message_id)


# -----------------------------------------------------------
while True:
    bot_start_time = time.ctime()
    msg = f'{bot_start_time}: Start Time'
    logger.info(msg)
    bot.telegram_client.post(method='sendMessage',
                             params={'text': msg,
                                     'chat_id': ADMIN_CHAT_ID})
    try:
        bot.setup_resources()
        reminder_wait()
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except Exception as error:
        error_message = create_err_msg(error)
        bot.telegram_client.post(method='sendMessage',
                                 params={'text': error_message,
                                         'chat_id': ADMIN_CHAT_ID})
        logger.error(error_message)
        bot.shutdown()
    time.sleep(5)
