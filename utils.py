from datetime import datetime

import telebot
from dateutil.parser import parse, parserinfo
from telebot import types
from telebot.apihelper import ApiTelegramException

from actions import UserActions
from clients.db_client import SQLiteClient
from clients.telegram_client import TelegramClient
from config import TOKEN, BASE_URL, DATABASE
from logger import logger


class MyBot(telebot.TeleBot):
    def __init__(self, client: TelegramClient, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.telegram_client = client
        self.user_action = user_action

    def setup_resources(self):
        self.user_action.setup()

    def shutdown_resources(self):
        self.user_action.shutdown()

    def shutdown(self):
        self.shutdown_resources()


telegram_client = TelegramClient(token=TOKEN, base_url=BASE_URL)
user_action = UserActions(SQLiteClient(DATABASE))
bot = MyBot(token=TOKEN, client=telegram_client)


# –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã-–≤—Ä–µ–º–µ–Ω–∏
def valid_date(message: types.Message):
    try:
        date_time = parse(message.text, dayfirst=True, fuzzy=False, parserinfo=RussianParserInfo())
        if date_time < datetime.now():
            text = (f'–í–≤–µ–¥–µ–Ω—ã –¥–∞—Ç–∞ –∏/–∏–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º: {date_time.strftime("%d.%m.%Y %H:%M")} '
                    f'\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            bot.reply_to(message, text)
            return False
        elif date_time > datetime(datetime.now().year + 3, 12, 31):
            text = (f'–í–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ –¥–∞–ª—ë–∫–æ–º –±—É–¥—É—â–µ–º: {date_time.strftime("%d.%m.%Y %H:%M")}'
                    f'\n–û–≥—Ä–∞–Ω–∏—á–∏–º—Å—è —Å–æ–±—ã—Ç–∏—è–º–∏ –Ω–∞ 3 –≥–æ–¥–∞ –≤–ø–µ—Ä–µ–¥?'
                    f'\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            bot.reply_to(message, text)
        else:
            return date_time
    except ValueError:
        bot.reply_to(message, f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è,'
                              f'\n–ø—Ä–∏–º–µ—Ä: {datetime.now().strftime("%d.%m.%Y %H:%M")}')
        return False


# –ú–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ú–ï–ù–Æ
def build_menu(buttons, n_cols: int, header_buttons=None, footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu


# –ú–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞
def get_text_period(period: str, factor: str):
    text_days = ''
    count = ' ' + factor if factor.isdigit() and int(factor) > 1 else ''
    if period == 'ONETIME':
        text_days = '–æ–¥–∏–Ω —Ä–∞–∑'
    elif period == 'MINUTE':
        text_days = f'–∫–∞–∂–¥—É—é{count} –º–∏–Ω—É—Ç—É'
    elif period == 'HOUR':
        text_days = f'–∫–∞–∂–¥—ã–π{count} —á–∞—Å'
    elif period == 'WORKDAY':
        days = {1: '–ø–Ω', 2: '–≤—Ç', 3: '—Å—Ä', 4: '—á—Ç', 5: '–ø—Ç', 6: '—Å–±', 7: '–≤—Å'}
        factor = [int(i) for i in str(check_workday(factor))]
        factor.sort()
        if factor == [1, 2, 3, 4, 5]:
            text_days = '–ø–æ –≤—Å–µ–º —Ä–∞–±–æ—á–∏–º –¥–Ω—è–º'
        elif factor == [6, 7]:
            text_days = '–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º'
        elif factor == [1, 2, 3, 4, 5, 6, 7]:
            text_days = '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å'
        elif factor == [0]:
            text_days = '<b>–æ—à–∏–±–æ—á–Ω—ã–π</b>'
        else:
            text_days = '–ø–æ ' + ', '.join([days[i] for i in factor])
    elif period == 'DAILY':
        text_days = f'–∫–∞–∂–¥—ã–π{count} –¥–µ–Ω—å'
    elif period == 'WEEKLY':
        text_days = f'–∫–∞–∂–¥—É—é{count} –Ω–µ–¥–µ–ª—é'
    elif period == 'MONTHLY':
        text_days = f'–∫–∞–∂–¥—ã–π{count} –º–µ—Å—è—Ü'
    return text_days


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Exception
def create_err_msg(err: Exception) -> str:
    current_date = datetime.now().strftime('%H:%M:%S %d/%m/%y')
    err_mess = f'–û—à–∏–±–∫–∞ –±–æ—Ç–∞. –í—Ä–µ–º—è: {current_date}\n{err.__class__}:\n{err}'
    return err_mess


class RussianParserInfo(parserinfo):
    MONTHS = [('–Ø–Ω–≤', '–Ø–Ω–≤–∞—Ä—å', '–Ø–Ω–≤–∞—Ä—è', 'Jan', 'January'),
              ('–§–µ–≤', '–§–µ–≤—Ä–∞–ª—å', '–§–µ–≤—Ä–∞–ª—è', 'Feb', 'February'),
              ('–ú–∞—Ä', '–ú–∞—Ä—Ç', '–ú–∞—Ä—Ç–∞', 'Mar', 'March'),
              ('–ê–ø—Ä', '–ê–ø—Ä–µ–ª—å', '–ê–ø—Ä–µ–ª—è', 'Apr', 'April'),
              ('–ú–∞–π', '–ú–∞–π', '–ú–∞—è', 'May'),
              ('–ò—é–Ω—å', '–ò—é–Ω—å', '–ò—é–Ω—è', 'Jun', 'June'),
              ('–ò—é–ª—å', '–ò—é–ª—å', '–ò—é–ª—è', 'Jul', 'July'),
              ('–ê–≤–≥', '–ê–≤–≥—É—Å—Ç', '–ê–≤–≥—É—Å—Ç–∞', 'Aug', 'August'),
              ('–°–µ–Ω—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–°–µ–Ω—Ç—è–±—Ä—è', 'Sep', 'September'),
              ('–û–∫—Ç', '–û–∫—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—è', 'Oct', 'October'),
              ('–ù–æ—è', '–ù–æ—è–±—Ä—å', '–ù–æ—è–±—Ä—è', 'Nov', 'November'),
              ('–î–µ–∫', '–î–µ–∫–∞–±—Ä—å', '–î–µ–∫–∞–±—Ä—è', 'Dec', 'December')]

    PERTAIN = ['–≥.', '–≥', 'of']

    WEEKDAYS = [('–ü–Ω', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Mon', 'Monday'),
                ('–í—Ç', '–í—Ç–æ—Ä–Ω–∏–∫', 'Tue', 'Tuesday'),
                ('–°—Ä', '–°—Ä–µ–¥–∞', 'Wed', 'Wednesday'),
                ('–ß—Ç', '–ß–µ—Ç–≤–µ—Ä–≥', 'Thu', 'Thursday'),
                ('–ü—Ç', '–ü—è—Ç–Ω–∏—Ü–∞', 'Fri', 'Friday'),
                ('–°–±', '–°—É–±–±–æ—Ç–∞', 'Sat', 'Saturday'),
                ('–í—Å', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', 'Sun', 'Sunday')]

    HMS = [('—á', '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤', 'h', 'hour', 'hours'),
           ('–º', '–º–∏–Ω', '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç', 'm', 'min', 'minute', 'minutes'),
           ('—Å', '—Å–µ–∫', '—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥', 's', 'sec', 'second', 'seconds')]


def text_processor(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    [base_id, step] = user_action.get_last_edit_status(user_id)[0]  # GET+

    if step == 'NEW':
        # –∑–∞–ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        user_action.set_text(message.html_text, base_id)  # SET+
        mess = f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY hh:mm"
        bot.send_message(chat_id, mess, parse_mode='HTML')

    elif step == 'TEXT':
        message_date_time = valid_date(message)

        if message_date_time:
            last_up = message_date_time.day
            user_action.set_date(last_up, message_date_time, base_id)  # SET+

            select_per(user_id=user_id, base_id=base_id)

    elif step == 'FACTOR':
        step_factor(factor=message.text, chat_id=chat_id, base_id=base_id)

    elif step == 'PAUSE':
        sub_step = user_action.get_sub_step(base_id)  # GET+
        if sub_step == 'EDIT_DATE':
            message_date_time = valid_date(message)
            if message_date_time:
                last_up = message_date_time.day
                user_action.set_edit_date(last_up, message_date_time, base_id)  # SET+
                mess = f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {message_date_time.strftime("%d.%m.%Y %H:%M")}'
                bot.send_message(message.chat.id, mess, parse_mode='HTML')
        elif sub_step == 'EDIT_TEXT':
            user_action.set_edit_text(message.html_text, base_id)  # SET+
            mess = f'–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω'
            bot.send_message(message.chat.id, mess, parse_mode='HTML')
        elif sub_step == 'EDIT_FACTOR':
            step_factor(factor=message.text, chat_id=chat_id, base_id=base_id)
        else:
            help_message(message)
    else:
        help_message(message)


def help_message(message: types.Message):
    user_id = message.from_user.id
    keyboard = types.InlineKeyboardMarkup()
    button_list = [
        types.InlineKeyboardButton(text='üÜï  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data=f'MSG_SET'),
        types.InlineKeyboardButton(text='üìù  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data=f'MSG_EDIT'),
        types.InlineKeyboardButton(text='üÜò  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º', callback_data=f'MSG_HELP'),
        types.InlineKeyboardButton(text='‚¨ÖÔ∏è  –û—Ç–º–µ–Ω–∞', callback_data='CANCEL')
    ]
    keyboard.add(*button_list)
    reply_markup = types.InlineKeyboardMarkup(build_menu(button_list, n_cols=1))
    mess = f'–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏:'

    last_mess_id = user_action.get_last_mess_id(user_id)  # GET-
    if last_mess_id:
        try:
            bot.delete_message(user_id, last_mess_id)
        except ApiTelegramException:
            pass
    new_message = bot.send_message(user_id, mess, parse_mode='HTML', reply_markup=reply_markup)
    user_action.set_last_mess_id(new_message.message_id, user_id)  # SET-


def step_factor(factor: str, chat_id: int, base_id: int):
    remind = user_action.get_message_by_id(base_id)  # GET+
    period = remind[7]
    cd = datetime.strptime(remind[6], "%Y-%m-%d %H:%M:%S")
    mess = f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
    start_mess = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ "<b>{remind[3]}</b>" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è '
    end_mess = f'\n–í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {cd.strftime("%d.%m.%Y %H:%M")}'
    if period == 'WORKDAY':
        result = check_workday(factor)
        if result:
            user_action.set_active(result, base_id)  # SET+
            mess = start_mess + '<b>' + get_text_period(period, str(result)) + '</b>' + end_mess
        else:
            mess = f'–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã –æ—Ç 1 –¥–æ 7, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏—Ö –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
    elif period == 'DAILY':
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ –∏ –æ–Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 1 –∏ –Ω–µ –±–æ–ª—å—à–µ 366
        try:
            val = int(factor)
            if 0 < val < 367:
                user_action.set_active(val, base_id)  # SET+
                mess = start_mess + '<b>' + get_text_period(period, factor) + '</b>' + end_mess
            else:
                mess = f'–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 366'
        except ValueError:
            pass
    elif period == 'WEEKLY':
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ –∏ –æ–Ω–æ –Ω–µ –±–æ–ª—å—à–µ 366/7=53
        try:
            val = int(factor)
            if 0 < val < 53:
                user_action.set_active(val, base_id)  # SET+
                mess = start_mess + '<b>' + get_text_period(period, factor) + '</b>' + end_mess
            else:
                mess = f"–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 52"
        except ValueError:
            pass
    elif period == 'MONTHLY':
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ –∏ –æ–Ω–æ –Ω–µ –±–æ–ª—å—à–µ 12
        try:
            val = int(factor)
            if 0 < val < 13:
                user_action.set_active(val, base_id)  # SET+
                mess = start_mess + '<b>' + get_text_period(period, factor) + '</b>' + end_mess
            else:
                mess = f'–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 12'
        except ValueError:
            pass
    else:
        logger.error(f'ERROR 2 - step_factor {remind}')
        mess = '–û—à–∏–±–∫–∞ –ë–æ—Ç–∞. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
    bot.send_message(chat_id, mess, parse_mode='HTML')


def check_workday(factor: str):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω—ã —Ü–∏—Ñ—Ä—ã (1,2,3,4,5,6,7), –ø–∏—à–µ–º —Ñ–∞–∫—Ç–æ—Ä –≤ –±–∞–∑—É
    val = sorted(set(factor))
    result = ''
    for i in val:
        if i in ["1", "2", "3", "4", "5", "6", "7"]:
            result = result + i
    return int(result) if result else 0


def choose_per(choose: str, base_id: int):
    mess = f'–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –º–µ–∂–¥—É —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏'
    if choose == 'ONETIME':
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ choose
        user_action.set_active(factor=1, db_id=base_id)  # SET+
        mess = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –ø—Ä–∏–¥–µ—Ç –≤–∞–º {get_text_period(choose, "1")}'
    elif choose == 'WORKDAY':
        mess += ('\n1 - –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è,'
                 '\n2,4 - –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º,'
                 '\n1,2,3,4,5 - –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ –±—É–¥–Ω—è–º')
    elif choose == 'DAILY':
        mess += ('\n1 - –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è,'
                 '\n2 - –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å –∏ —Ç.–¥.')
    elif choose == 'WEEKLY':
        mess += ('\n1 - –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏,'
                 '\n2 - –∫–∞–∂–¥—É—é –≤—Ç–æ—Ä—É—é –Ω–µ–¥–µ–ª—é –∏ —Ç.–¥.')
    elif choose == 'MONTHLY':
        mess += ('\n1 - –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è –∏ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞,'
                 '\n2 - –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –º–µ—Å—è—Ü –∏ —Ç.–¥.'
                 '\n\n–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–µ –±—É–¥–µ—Ç –≤ –º–µ—Å—è—Ü–µ, —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å'
                 '\n–ï—Å–ª–∏ —á–∏—Å–ª–æ –≤—ã–ø–∞–¥–µ—Ç –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π, —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –≤ –ø—è—Ç–Ω–∏—Ü—É')
    else:
        logger.error(f'ERROR 1 - choose_period {choose}, base_id {base_id}')
        mess = '–û—à–∏–±–∫–∞ –ë–æ—Ç–∞. –ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω'
    return mess


def select_per(user_id: int, base_id: int):
    keyboard = types.InlineKeyboardMarkup()
    button_list = [
        types.InlineKeyboardButton(text='–û–¥–∏–Ω —Ä–∞–∑. –ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤', callback_data=f'PERIOD:ONETIME:{base_id}'),
        types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏', callback_data=f'PERIOD:WORKDAY:{base_id}'),
        types.InlineKeyboardButton(text='–ö–∞–∂–¥—ã–π –• –¥–µ–Ω—å', callback_data=f'PERIOD:DAILY:{base_id}'),
        types.InlineKeyboardButton(text='–ö–∞–∂–¥—É—é –• –Ω–µ–¥–µ–ª—é', callback_data=f'PERIOD:WEEKLY:{base_id}'),
        types.InlineKeyboardButton(text='–ö–∞–∂–¥—ã–π –• –º–µ—Å—è—Ü', callback_data=f'PERIOD:MONTHLY:{base_id}')
    ]
    keyboard.add(*button_list)
    reply_markup = types.InlineKeyboardMarkup(build_menu(button_list, n_cols=1))
    mess = f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∏ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞'

    #
    last_mess_id = user_action.get_last_mess_id(user_id)  # GET-
    if last_mess_id:
        try:
            bot.delete_message(user_id, last_mess_id)
        except ApiTelegramException:
            pass
    new_message = bot.send_message(user_id, mess, parse_mode='HTML', reply_markup=reply_markup)
    user_action.set_last_mess_id(new_message.message_id, user_id)  # SET-


def show_det(remind):
    cd = datetime.strptime(remind[6], "%Y-%m-%d %H:%M:%S")
    status = remind[10] + ' - <b>' + remind[11] + '</b>' if remind[10] == 'ERROR' else remind[10]

    result = (f'<b>–ì—Ä—É–ø–ø–∞: </b>{remind[3]}'
              f'\n<b>–î–∞—Ç–∞: </b>{cd.strftime("%d.%m.%Y")}'
              f'\n<b>–ü–µ—Ä–∏–æ–¥: </b>{get_text_period(remind[7], remind[8])} –≤ {cd.strftime("%H:%M")}'
              f'\n<b>–°—Ç–∞—Ç—É—Å: </b>{status}'
              f'\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ: </b>\n{remind[9]}')
    return result


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
def add_bot(chat_id, user_id, title, username):
    if bot.user_action.check_create_user(user_id, chat_id):
        bot.user_action.set_new_user(chat_id=chat_id, user_id=user_id, title=title, username=username)
    else:
        bot.user_action.update_exist_user(chat_id=chat_id, user_id=user_id, title=title, username=username)


# –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
def help_msg(name=None, surname=None):
    bot_name = bot.get_me().username
    mess = (f'–ü—Ä–∏–≤–µ—Ç! <b>{name if name else ""} {surname if surname else ""} </b>'
            f'\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –¢–µ–ª–µ–≥—Ä–∞–º'
            f'\n\n–ß—Ç–æ–±—ã <b>—É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≤ –≥—Ä—É–ø–ø–µ</b>:'
            f'\n  1. –î–æ–±–∞–≤—å—Ç–µ –≤ –≥—Ä—É–ø–ø—É –±–æ—Ç–∞ '
            f'\n  2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start@{bot_name}'
            f'\n\n–ß—Ç–æ–±—ã <b>—Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /set'
            f'\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–ª—è –ª—é–±–æ–≥–æ —á–∞—Ç–∞, –≥–¥–µ –≤—ã —É–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª–∏ –±–æ—Ç–∞'
            f'\n\n–ß—Ç–æ–±—ã <b>—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å</b> –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit')
    return mess


# –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
def edit_msg(user_id):
    all_reminds = bot.user_action.get_all_active(user_id)
    last_mess_id = bot.user_action.get_last_mess_id(user_id)
    bot.user_action.delete_update_event(user_id)

    if all_reminds:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
        for i in range(len(all_reminds)):
            all_reminds[i] = (all_reminds[i][:2] +
                              (datetime.strptime(all_reminds[i][2], "%Y-%m-%d %H:%M:%S"),) +
                              all_reminds[i][3:])
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
        all_reminds.sort(key=lambda x: x[2])
    keyboard = types.InlineKeyboardMarkup()
    button_list = []
    for i in all_reminds:
        if i[3] == 'PAUSE':
            actual = '‚è∏'
            if i[4] == 'EDIT_DATE':
                actual = '‚è∞'
            elif i[4] == 'EDIT_PERIOD':
                actual = 'üí´'
            elif i[4] == 'EDIT_TEXT':
                actual = '‚úèÔ∏è'
        elif i[3] == 'ERROR':
            actual = '‚ö†Ô∏è'
        else:
            actual = i[2].strftime("%d.%m.%Y")
        button_list.append(types.InlineKeyboardButton(text=f'{actual} : {i[1]}', callback_data=f'MODIFY:{i[0]}'))
    if button_list:
        button_list.append(types.InlineKeyboardButton(text='‚¨ÖÔ∏è  –û—Ç–º–µ–Ω–∞', callback_data='CANCEL'))
    keyboard.add(*button_list)
    reply_markup = types.InlineKeyboardMarkup(build_menu(button_list, n_cols=1))
    mess = f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å' if all_reminds \
        else f'–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /set'

    if last_mess_id:
        try:
            bot.delete_message(user_id, last_mess_id)
        except ApiTelegramException:
            pass
    new_message = bot.send_message(user_id, mess, parse_mode='HTML', reply_markup=reply_markup)
    bot.user_action.set_last_mess_id(new_message.message_id, user_id)


# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
def set_msg(user_id, username):

    title = '–ú–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç'
    if bot.user_action.check_create_user(user_id, user_id):
        bot.user_action.set_new_user(chat_id=user_id, user_id=user_id, title=title, username=username)

    groups = bot.user_action.get_groups(user_id)
    keyboard = types.InlineKeyboardMarkup()
    button_list = []
    for i in groups:
        button_list.append(types.InlineKeyboardButton(text=i[1], callback_data=f'CREATE:{i[0]}'))

    if button_list:
        button_list.append(types.InlineKeyboardButton(text='‚¨ÖÔ∏è  –û—Ç–º–µ–Ω–∞', callback_data='CANCEL'))
    keyboard.add(*button_list)
    # n_cols = 1 is for single column and multiple rows
    reply_markup = types.InlineKeyboardMarkup(build_menu(button_list, n_cols=1))
    mess = f'–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'

    last_mess_id = bot.user_action.get_last_mess_id(user_id)
    if last_mess_id:
        try:
            bot.delete_message(user_id, last_mess_id)
        except ApiTelegramException:
            pass
    new_message = bot.send_message(user_id, mess, parse_mode='HTML', reply_markup=reply_markup)
    bot.user_action.set_last_mess_id(new_message.message_id, user_id)
